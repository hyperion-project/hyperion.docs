import{_ as e,c as a,o as s,as as t}from"./chunks/framework.CquQrE-Y.js";const f=JSON.parse('{"title":"Support Request","description":"","frontmatter":{},"headers":[],"relativePath":"user/advanced/Support.md","filePath":"user/advanced/Support.md","lastUpdated":1751697695000}'),o={name:"user/advanced/Support.md"};function i(p,n,l,r,u,c){return s(),a("div",null,n[0]||(n[0]=[t(`<h1 id="support-request" tabindex="-1">Support Request <a class="header-anchor" href="#support-request" aria-label="Permalink to &quot;Support Request&quot;">​</a></h1><p>In case you need support or you found a bug it&#39;s all about informations that you need to deliver.</p><h2 id="usual-request" tabindex="-1">Usual request <a class="header-anchor" href="#usual-request" aria-label="Permalink to &quot;Usual request&quot;">​</a></h2><p>To provide a log, please go to System -&gt; Log in the WebUI and copy the log. Then create a paste at <a href="https://pastebin.com" target="_blank" rel="noreferrer">Pastebin.com</a> with the copied log. Once you have the Pastebin link, please open a issue on <a href="https://github.com/hyperion-project/hyperion.ng/issues/new/choose" target="_blank" rel="noreferrer">Github</a>, fill out the template and provide the Pastebin link.</p><h2 id="segmentation-faults" tabindex="-1">Segmentation faults <a class="header-anchor" href="#segmentation-faults" aria-label="Permalink to &quot;Segmentation faults&quot;">​</a></h2><p>Debugging segmentation faults requires a bunch of work, if we don&#39;t own your hardware (idr one of these plenty ARM systems) or can&#39;t reconstruct the segmentation fault we need a backtrace log from you. In order to create one, follow these steps.</p><ul><li>You need a &quot;Debug&quot; version of Hyperion, download and install it over your existing installation.</li><li>Install &quot;GDB&quot;, gbd is a tool which is often used for debugging. Get it from the software repository of your distribution (Debian e.g. <code>sudo apt-get install gdb</code></li></ul><h3 id="steps-of-execution" tabindex="-1">Steps of execution <a class="header-anchor" href="#steps-of-execution" aria-label="Permalink to &quot;Steps of execution&quot;">​</a></h3><ul><li>Open a terminal</li><li>Make sure Hyperion is NOT running, this can be done by typing <code>sudo service hyperiond stop</code> into the terminal and press enter</li><li>Type in <code>gdb</code> and press enter. You will now see the gdb welcome information and a &quot;(gdb)&quot; in front of your cursor</li><li>Tell gdb where &quot;hyperiond&quot; is located, usually at /usr/share/hyperion/bin/hyperiond. Prepend &quot;file&quot; to the path. So type into terminal something like that and press enter: <code>file /usr/share/hyperion/bin/hyperiond</code></li><li>gdb should tell you now that the binary has been loaded with it&#39;s symbols etc</li><li>Now type in <code>run</code> and press enter, this will start Hyperion. Now you can use Hyperion as usual, repeat the steps you did to create a segmentation fault.</li><li>A segmentation fault happened, when Hyperion stops responding and you see something like this as last message at the terminal: <code>Thread 1 &quot;hyperiond&quot; received signal SIGSEGV, Segmentation fault.</code></li><li>Now type in <code>backtrace</code> and press enter, add the backtrace to your support request thread at our forum. <a href="https://hyperion-project.org" target="_blank" rel="noreferrer">Hyperion Project Forum</a></li><li>To quit gdb press enter and type in <code>quit</code>, you can start Hyperion again with <code>sudo service hyperiond start</code>. It&#39;s not recommended to use &quot;Debug&quot; Hyperion builds in production, just install the &quot;Release&quot; version again.</li></ul><h3 id="example-backtrace-log" tabindex="-1">Example backtrace log <a class="header-anchor" href="#example-backtrace-log" aria-label="Permalink to &quot;Example backtrace log&quot;">​</a></h3><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  (gdb) backtrace</span></span>
<span class="line"><span>  #0  0x0000000000000000 in ?? ()</span></span>
<span class="line"><span>  #1  0x00000000006173f2 in LinearColorSmoothing::queueColors (this=0xfdfa70, </span></span>
<span class="line"><span>      ledColors=std::vector of length 34, capacity 34 = {...})</span></span>
<span class="line"><span>      at /home/hyperion/Dokumente/hyperion.ngBeta/libsrc/hyperion/LinearColorSmoothing.cpp:153</span></span>
<span class="line"><span>  #2  0x0000000000617374 in LinearColorSmoothing::updateLeds (this=0xfdfa70)</span></span>
<span class="line"><span>      at /home/hyperion/Dokumente/hyperion.ngBeta/libsrc/hyperion/LinearColorSmoothing.cpp:143</span></span>
<span class="line"><span>  #3  0x0000000000609652 in LinearColorSmoothing::qt_static_metacall (</span></span>
<span class="line"><span>      _o=0xfdfa70, _c=QMetaObject::InvokeMetaMethod, _id=1, _a=0x7fffffffd190)</span></span>
<span class="line"><span>      at /home/hyperion/Dokumente/hyperion.ngBeta/build/libsrc/hyperion/moc_LinearColorSmoothing.cpp:85</span></span>
<span class="line"><span>  #4  0x00007ffff59abd2a in QMetaObject::activate(QObject*, int, int, void**) ()</span></span>
<span class="line"><span>     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5</span></span>
<span class="line"><span>  #5  0x00007ffff59b85c8 in QTimer::timerEvent(QTimerEvent*) ()</span></span>
<span class="line"><span>     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5</span></span>
<span class="line"><span>  #6  0x00007ffff59acbb3 in QObject::event(QEvent*) ()</span></span>
<span class="line"><span>     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5</span></span>
<span class="line"><span>  #7  0x00007ffff78a505c in QApplicationPrivate::notify_helper(QObject*, QEvent*)</span></span>
<span class="line"><span>     () from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5</span></span>
<span class="line"><span>  #8  0x00007ffff78aa516 in QApplication::notify(QObject*, QEvent*) ()</span></span>
<span class="line"><span>     from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5</span></span>
<span class="line"><span>  #9  0x00007ffff597d38b in QCoreApplication::notifyInternal(QObject*, QEvent*)</span></span>
<span class="line"><span>  ---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---</span></span>
<span class="line"><span>      () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5</span></span>
<span class="line"><span>  #10 0x00007ffff59d25ed in QTimerInfoList::activateTimers() ()</span></span>
<span class="line"><span>     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5</span></span>
<span class="line"><span>  #11 0x00007ffff59d2af1 in ?? () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5</span></span>
<span class="line"><span>  #12 0x00007ffff4572127 in g_main_context_dispatch ()</span></span>
<span class="line"><span>     from /lib/x86_64-linux-gnu/libglib-2.0.so.0</span></span>
<span class="line"><span>  #13 0x00007ffff4572380 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0</span></span>
<span class="line"><span>  #14 0x00007ffff457242c in g_main_context_iteration ()</span></span>
<span class="line"><span>     from /lib/x86_64-linux-gnu/libglib-2.0.so.0</span></span>
<span class="line"><span>  #15 0x00007ffff59d37cf in QEventDispatcherGlib::processEvents(QFlags&lt;QEventLoop::ProcessEventsFlag&gt;) () from /usr/lib/x86_64-linux-</span></span>
<span class="line"><span>  gnu/libQt5Core.so.5</span></span>
<span class="line"><span>  #16 0x00007ffff597ab4a in QEventLoop::exec(QFlags&lt;QEventLoop::ProcessEventsFlag&gt;) () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5</span></span>
<span class="line"><span>  #17 0x00007ffff5982bec in QCoreApplication::exec() ()</span></span>
<span class="line"><span>     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5</span></span>
<span class="line"><span>  #18 0x00000000005d9279 in main (argc=1, argv=0x7fffffffde08)</span></span>
<span class="line"><span>      at /home/hyperion/Dokumente/hyperion.ngBeta/src/hyperiond/main.cpp:337</span></span></code></pre></div>`,11)]))}const h=e(o,[["render",i]]);export{f as __pageData,h as default};
