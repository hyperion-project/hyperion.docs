(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{359:function(e,t,a){"use strict";a.r(t);var s=a(12),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"befehlszeile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#befehlszeile"}},[e._v("#")]),e._v(" Befehlszeile")]),e._v(" "),t("p",[e._v("Alle mit Hyperion ausgelieferten ausführbaren Dateien haben einige Befehlszeilenargumente/Optionen")]),e._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#hyperiond"}},[e._v("hyperiond")])]),t("li",[t("a",{attrs:{href:"#hyperion-remote"}},[e._v("hyperion-remote")])]),t("li",[t("a",{attrs:{href:"#hyperion-capture"}},[e._v("hyperion-capture")])])])]),t("p"),e._v(" "),t("h2",{attrs:{id:"hyperiond"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hyperiond"}},[e._v("#")]),e._v(" hyperiond")]),e._v(" "),t("p",[e._v("Das Herzstück von Hyperion")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Zeigt die Version/Build-Datum/Commit von Hyperion an ")]),e._v("\nhyperiond "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--version")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Aktuelles Administrations-Passwort wieder auf 'hyperion' zurücksetzen")]),e._v("\nhyperiond "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--resetPassword")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Überschreibe den Pfad für die Benutzerdaten (der standardmäßig auf dein Home-Verzeichnis eingestellt ist)")]),e._v("\nhyperiond "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--userdata")]),e._v(" /temp/anotherDir\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Log-Level temporär überschreiben: hyperiond -s für silent -v für verbose und -d für debug")]),e._v("\nhyperiond "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Effekte in ein Verzeichnis exportieren")]),e._v("\nhyperiond --export-effects /tmp\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Hyperion im Desktop-Modus ausführen")]),e._v("\nhyperiond "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--desktop")]),e._v("\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("Wenn ein Pfadname Leerzeichen enthält, dann umschließe ihn mit "),t("code",[e._v('"')]),e._v(" . "),t("br"),e._v(" "),t("code",[e._v('hyperiond --userdata "/temp/another Dir"')])])]),e._v(" "),t("h2",{attrs:{id:"hyperion-remote"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hyperion-remote"}},[e._v("#")]),e._v(" hyperion-remote")]),e._v(" "),t("p",[e._v("hyperion-remote ist ein Kommandozeilen-Tool, das vorgegebene Argumente in JSON-Befehle übersetzt und diese an den Hyperion JSON-RPC sendet. Es ist ideal für Skripte geeignet. Es unterstützt fast alle Befehle, die Hyperion zur Verfügung stellt.")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Eine Liste aller verfügbaren Befehle abrufen")]),e._v("\nhyperion-remote "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-h")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Einstellen einer Farbe mit Hilfe von HTML-Farbnamen")]),e._v("\nhyperion-remote "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-c")]),e._v(" aqua\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Einstellen einer Farbe mit Hilfe von Hex-Werten")]),e._v("\nhyperion-remote "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-c")]),e._v(" FF7F50\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Farbe mit einer Dauer von 5 Sekunden statt endlos einstellen ")]),e._v("\nhyperion-remote "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-c")]),e._v(" FF7F50 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5000")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Einen Effekt starten")]),e._v("\nhyperion-remote "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-e")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Rainbow swirl"')]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# mit einer Dauer von 8 Sekunden statt endlos")]),e._v("\nhyperion-remote "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-e")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Rainbow swirl"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8000")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Bestimmte Instanz ansteuern")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# ACHTUNG: Hyperion-Instanzen werden standardmäßig mit der Funktion "Instance Syncing" synchronisiert')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Du kannst das Verhalten für jede Instanz konfigurieren")]),e._v("\nhyperion-remote "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-I")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Mein cooler Instanzname"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Oder")]),e._v("\nhyperion-remote "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--instance")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Mein cooler Instanzname"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Beispiel um ein Effekt für eine Instanz zu setzen")]),e._v("\nhyperion-remote "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--instance")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Mein cooler Instanzname"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-e")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Rainbow swirl"')]),e._v("\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("Hyperion-Remote wird automatisch nach einem Hyperion-Server suchen. So kannst du das sogar auf einem anderen Gerät in deinem lokalen Netzwerk verwenden, ohne eine IP/Port anzugeben.")])]),e._v(" "),t("h2",{attrs:{id:"hyperion-capture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hyperion-capture"}},[e._v("#")]),e._v(" hyperion-capture")]),e._v(" "),t("p",[e._v("Wir stellen auch auch unabhängige Capture-Apps direkt in deinem Hyperion-Verzeichnis bereit:")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[e._v("App")]),e._v(" "),t("th",{staticStyle:{"text-align":"left"}},[e._v("Quelle")])])]),e._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("hyperion-aml")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Amlogic Bildschirmerfassung")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("hyperion-dispmanx")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("DispManX Raspberry Pi Bildschirmerfassung")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("hyperion-framebuffer")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Linux FrameBuffer Bildschirmerfassung")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("hyperion-osx")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("macOS Bildschirmerfassung")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("hyperion-qt")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Qt Multi Platform Bildschirmerfassung")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("hyperion-v4l2")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("USB Erfassung")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("hyperion-x11")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("X11 Bildschirmerfassung")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("hyperion-xcb")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("XCB Bildschirmerfassung")])])])]),e._v(" "),t("p",[e._v("Abhängig von deiner Plattform sind es mehr oder weniger Apps.")]),e._v(" "),t("p",[e._v("Alle diese Anwendungen können unabhängig von Hyperion gestartet werden und alle haben leicht unterschiedliche Optionen. Sie kommunizieren mit der Flatbuffer-Schnittstelle von Hyperion.\nJedes Modul sucht automatisch nach einem Hyperion-Server, wenn die Option "),t("code",[e._v("--address")]),e._v(" nicht verwendet wird.")]),e._v(" "),t("p",[e._v("Nachfolgend findest du zur Veranschaulichung die Ausgabe von der Qt Bildschirmerfassungsapp.")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("hyperion-qt "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--help")]),e._v("\nhyperion-qt:\n\tVersion   "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.0")]),e._v(".16 "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("((")]),e._v("HEAD detached at "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v(".16")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Paulchen"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Panther"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("cb85d2d"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("a93d79b"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1705568419")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("))")])]),e._v("\n\tbuild time: Jan "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("18")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2024")]),e._v(" 09:15:43\nUsage: ./bin/hyperion-qt "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("options"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nQt interface capture application "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" Hyperion. Will automatically search a Hyperion server "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-a")]),e._v(" option isn"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'t used. Please note that if you have more than one server running it'")]),e._v("s "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" or "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("less")]),e._v(" random "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("which")]),e._v(" one will be used.\n\nOptions:\n  -d, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--display")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("display"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("                Set the display to capture "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("default:\n                                         "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  -f, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--framerate")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("framerate"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("            Capture frame rate. Range "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("-30fps\n                                         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("default: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("25")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  -s, --size-decimator "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("size-decimator"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  Decimation factor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" the output image\n                                         size "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("default"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  --crop-left "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("crop-left"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("                Number of pixels to crop from the left\n                                         of the picture before decimation\n  --crop-right "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("crop-right"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("              Number of pixels to crop from the\n                                         right of the picture before decimation\n  --crop-top "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("crop-top"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("                  Number of pixels to crop from the "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("top")]),e._v("\n                                         of the picture before decimation\n  --crop-bottom "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("crop-bottom"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("            Number of pixels to crop from the\n                                         bottom of the picture before decimation\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--3DSBS")]),e._v("                                Interpret the incoming video stream as\n                                         3D side-by-side\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--3DTAB")]),e._v("                                Interpret the incoming video stream as\n                                         3D top-and-bottom\n  -a, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--address")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("address"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("                The "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("hostname")]),e._v(" or IP-address "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("IPv4 or\n                                         IPv6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" of the hyperion server.\n                                         Default host: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1, port: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("19400")]),e._v(".\n                                         Sample addresses:\n                                         Host "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" hyperion.fritz.box\n                                         IPv4 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:19400\n                                         IPv6 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2001")]),e._v(":1:2:3:4:5:6:7"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  -p, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--priority")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("priority"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("              Use the provided priority channel\n                                         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("suggested "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v("-199"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("default: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("150")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  --skip-reply                           Do not receive and check reply\n                                         messages from Hyperion\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--screenshot")]),e._v("                           Take a single screenshot, save it to\n                                         "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" and quit\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--debug")]),e._v("                                Enable debug logging\n  -h, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--help")]),e._v("                             Show this "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v(" message and "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exit")]),e._v("\n")])])]),t("p",[e._v("Beispiel mit einem Aufnahmeintervall von 15 Bildern pro Sekunde (fps)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("hyperion-qt -f 15\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);