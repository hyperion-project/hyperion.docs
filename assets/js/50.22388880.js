(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{360:function(e,n,i){"use strict";i.r(n);var r=i(12),t=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"supportanfrage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#supportanfrage"}},[e._v("#")]),e._v(" Supportanfrage")]),e._v(" "),n("p",[e._v("Falls du Support brauchst oder einen Fehler gefunden hast, ist es wichtig, dass du die Informationen lieferst, die wir brauchen.")]),e._v(" "),n("h2",{attrs:{id:"gewohnliche-anfrage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gewohnliche-anfrage"}},[e._v("#")]),e._v(" Gewöhnliche Anfrage")]),e._v(" "),n("p",[e._v("Um ein Protokoll bereitzustellen, geh bitte in der WebUI zu System -> Log und kopiere das Protokoll. Erstellt dann ein Paste bei "),n("a",{attrs:{href:"https://pastebin.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pastebin.com"),n("OutboundLink")],1),e._v(" mit dem kopierten Protokoll.\nSobald du den Pastebin-Link hast, öffne bitte ein Issue auf "),n("a",{attrs:{href:"https://github.com/hyperion-project/hyperion.ng/issues/new/choose",target:"_blank",rel:"noopener noreferrer"}},[e._v("Github"),n("OutboundLink")],1),e._v(", fülle die Vorlage aus und gib den Pastebin-Link an.")]),e._v(" "),n("h2",{attrs:{id:"segmentierungsfehler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#segmentierungsfehler"}},[e._v("#")]),e._v(" Segmentierungsfehler")]),e._v(" "),n("p",[e._v("Das Debuggen von Segmentierungsfehlern erfordert einen größeren Aufwand, wenn wir deine Hardware nicht besitzen (idr eines dieser vielen ARM-Systeme) oder den Segmentierungsfehler nicht rekonstruieren können, benötigen wir ein Backtrace-Protokoll von dir. Um ein solches zu erstellen, ist folgende Vorgehensweise erforderlich.")]),e._v(" "),n("ul",[n("li",[e._v('Du brauchst eine "Debug"-Version von Hyperion, lade sie herunter und installiere sie über deine bestehende Installation.')]),e._v(" "),n("li",[e._v('Installiere "GDB", gdb ist ein Tool, das oft zum Debuggen verwendet wird. Hole es aus dem Software-Repository deiner Distribution (Debian z.B. '),n("code",[e._v("sudo apt-get install gdb")]),e._v(")")])]),e._v(" "),n("h3",{attrs:{id:"ausfuhrungsschritte"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ausfuhrungsschritte"}},[e._v("#")]),e._v(" Ausführungsschritte")]),e._v(" "),n("ul",[n("li",[e._v("Öffne ein Terminal")]),e._v(" "),n("li",[e._v("Stelle sicher, dass Hyperion NICHT läuft. Gib dazu "),n("code",[e._v("sudo service hyperiond stop")]),e._v(" in das Terminal ein und drücke die Eingabetaste")]),e._v(" "),n("li",[e._v("Gib "),n("code",[e._v("gdb")]),e._v(' ein und drücke die Eingabetaste. Du siehst nun die gdb-Begrüßungsinformationen und ein "(gdb)" vor deinem Cursor')]),e._v(" "),n("li",[e._v('Teilt gdb mit, wo sich "hyperiond" befindet, normalerweise unter /usr/share/hyperion/bin/hyperiond. Stellt dem Pfad "file" voran. Gib also im Terminal folgendes ein und drücke Enter: '),n("code",[e._v("Datei /usr/share/hyperion/bin/hyperiond")])]),e._v(" "),n("li",[e._v("gdb sollte nun anzeigen, dass das Binary mit seinen Symbolen usw. geladen wurde")]),e._v(" "),n("li",[e._v("Gib nun "),n("code",[e._v("run")]),e._v(" ein und drücke die Eingabetaste, dies wird Hyperion starten. Jetzt können wir Hyperion wie gewohnt verwenden, wir wiederholen die Schritte, die wir zum Erstellen eines Segmentierungsfehlers durchgeführt haben.")]),e._v(" "),n("li",[e._v("Ein Segmentation Fault ist aufgetreten, wenn Hyperion nicht mehr antwortet und du als letzte Meldung am Terminal etwas wie folgt siehst: "),n("code",[e._v('Thread 1 "hyperiond" received signal SIGSEGV, Segmentation fault.')])]),e._v(" "),n("li",[e._v("Gib nun "),n("code",[e._v("backtrace")]),e._v(" ein und drücke die Eingabetaste, füge den Backtrace zu deinem Supportanfrage-Thread in unserem Forum hinzu. "),n("a",{attrs:{href:"https://hyperion-project.org/forum",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hyperion Project Forum"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("Um gdb zu beenden, drücke die Eingabetaste und gibt "),n("code",[e._v("quit")]),e._v(" ein. Du kannst Hyperion wieder mit "),n("code",[e._v("sudo service hyperiond start")]),e._v(' starten. Es wird nicht empfohlen, "Debug"-Hyperion-Builds in der produktiven Umgebung zu verwenden, installiere einfach wieder die "Release"-Version.')])]),e._v(" "),n("h3",{attrs:{id:"beispiel-backtrace-protokoll"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beispiel-backtrace-protokoll"}},[e._v("#")]),e._v(" Beispiel Backtrace-Protokoll")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  (gdb) backtrace\n  #0  0x0000000000000000 in ?? ()\n  #1  0x00000000006173f2 in LinearColorSmoothing::queueColors (this=0xfdfa70, \n      ledColors=std::vector of length 34, capacity 34 = {...})\n      at /home/hyperion/Dokumente/hyperion.ngBeta/libsrc/hyperion/LinearColorSmoothing.cpp:153\n  #2  0x0000000000617374 in LinearColorSmoothing::updateLeds (this=0xfdfa70)\n      at /home/hyperion/Dokumente/hyperion.ngBeta/libsrc/hyperion/LinearColorSmoothing.cpp:143\n  #3  0x0000000000609652 in LinearColorSmoothing::qt_static_metacall (\n      _o=0xfdfa70, _c=QMetaObject::InvokeMetaMethod, _id=1, _a=0x7fffffffd190)\n      at /home/hyperion/Dokumente/hyperion.ngBeta/build/libsrc/hyperion/moc_LinearColorSmoothing.cpp:85\n  #4  0x00007ffff59abd2a in QMetaObject::activate(QObject*, int, int, void**) ()\n     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5\n  #5  0x00007ffff59b85c8 in QTimer::timerEvent(QTimerEvent*) ()\n     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5\n  #6  0x00007ffff59acbb3 in QObject::event(QEvent*) ()\n     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5\n  #7  0x00007ffff78a505c in QApplicationPrivate::notify_helper(QObject*, QEvent*)\n     () from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5\n  #8  0x00007ffff78aa516 in QApplication::notify(QObject*, QEvent*) ()\n     from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5\n  #9  0x00007ffff597d38b in QCoreApplication::notifyInternal(QObject*, QEvent*)\n  ---Type <return> to continue, or q <return> to quit---\n      () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5\n  #10 0x00007ffff59d25ed in QTimerInfoList::activateTimers() ()\n     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5\n  #11 0x00007ffff59d2af1 in ?? () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5\n  #12 0x00007ffff4572127 in g_main_context_dispatch ()\n     from /lib/x86_64-linux-gnu/libglib-2.0.so.0\n  #13 0x00007ffff4572380 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\n  #14 0x00007ffff457242c in g_main_context_iteration ()\n     from /lib/x86_64-linux-gnu/libglib-2.0.so.0\n  #15 0x00007ffff59d37cf in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/x86_64-linux-\n  gnu/libQt5Core.so.5\n  #16 0x00007ffff597ab4a in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5\n  #17 0x00007ffff5982bec in QCoreApplication::exec() ()\n     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5\n  #18 0x00000000005d9279 in main (argc=1, argv=0x7fffffffde08)\n      at /home/hyperion/Dokumente/hyperion.ngBeta/src/hyperiond/main.cpp:337\n")])])])])}),[],!1,null,null,null);n.default=t.exports}}]);